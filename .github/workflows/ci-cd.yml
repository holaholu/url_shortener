# Continuous Integration and Deployment Workflow for URL Shortener
name: CI/CD

# Trigger workflow on push to main branch and pull requests
on:
  push:
    branches: [ main ]  # Run on pushes to main
  pull_request:
    branches: [ main ]  # Run on PRs targeting main

jobs:
  # Test job: Run tests, linting, and security checks
  test:
    runs-on: ubuntu-latest
    env:
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}

    steps:
    # Check out repository code
    - uses: actions/checkout@v3
    
    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    # Install Python dependencies and tools
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest bandit redis  # Install test and security tools
        pip install -r requirements.txt  # Install project dependencies
    
    # Test Redis connection
    - name: Test Redis connection
      env:
        REDIS_HOST: ${{ secrets.REDIS_HOST }}
        REDIS_PORT: ${{ secrets.REDIS_PORT }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      run: |
        python3 -c "
        from redis import Redis
        import os
        print('Testing Redis connection...')
        host = os.environ['REDIS_HOST']
        port = os.environ['REDIS_PORT']
        password = os.environ['REDIS_PASSWORD']
        print(f'Host: {host}')
        print(f'Port: {port}')
        redis = Redis(
            host=host,
            port=int(port),
            password=password,
            decode_responses=True
        )
        print('Pinging Redis...')
        print(f'Ping response: {redis.ping()}')
        "
    
    # Run code quality checks with flake8
    - name: Run flake8
      run: |
        # Check for serious errors only
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Run full check but don't fail on errors
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    # Run security audit with bandit
    - name: Security check with bandit
      run: |
        bandit -r . -ll -ii -x ./venv,./tests  # Recursive check, exclude test files
    
    # Run tests with verbose output
    - name: Run tests
      run: |
        pytest -v --capture=no
    
  # Deployment job: Deploy to Render if tests pass
  deploy:
    needs: test  # Only run after test job succeeds
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch
    runs-on: ubuntu-latest
    
    steps:
    # Trigger deployment on Render
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}  # Use GitHub secret
      run: |
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "accept: application/json" \
          -H "authorization: Bearer $RENDER_API_KEY")
        
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n 1)
        BODY=$(echo "$RESPONSE" | head -n -1)
        
        if [ "$HTTP_STATUS" -ge 200 ] && [ "$HTTP_STATUS" -lt 300 ]; then
          echo "Deployment triggered successfully"
          echo "Response: $BODY"
        else
          echo "Failed to trigger deployment"
          echo "Status code: $HTTP_STATUS"
          echo "Response: $BODY"
          exit 1
        fi
